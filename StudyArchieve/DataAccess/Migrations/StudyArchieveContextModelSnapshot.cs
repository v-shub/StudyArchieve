// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(StudyArchieveContext))]
    partial class StudyArchieveContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.AcademicYear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("YearLabel")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)")
                        .HasColumnName("year_label");

                    b.HasKey("Id")
                        .HasName("PK__academic__3213E83F1B6CA0E6");

                    b.HasIndex(new[] { "YearLabel" }, "UQ__academic__588C243AB9AC4808")
                        .IsUnique();

                    b.ToTable("academic_years", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__authors__3213E83F90580668");

                    b.ToTable("authors", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("role_name");

                    b.HasKey("Id")
                        .HasName("PK__roles__3213E83F0B07FD31");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Solution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateAdded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("date_added")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("SolutionText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("solution_text");

                    b.Property<int>("TaskId")
                        .HasColumnType("int")
                        .HasColumnName("task_id");

                    b.Property<int?>("UserAddedId")
                        .HasColumnType("int")
                        .HasColumnName("user_added_id");

                    b.HasKey("Id")
                        .HasName("PK__solution__3213E83F48212A39");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserAddedId");

                    b.ToTable("solutions", (string)null);
                });

            modelBuilder.Entity("Domain.Models.SolutionFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("file_name");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("file_path");

                    b.Property<int>("SolutionId")
                        .HasColumnType("int")
                        .HasColumnName("solution_id");

                    b.HasKey("Id")
                        .HasName("PK__solution__3213E83FA52D0F06");

                    b.HasIndex("SolutionId");

                    b.ToTable("solution_files", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__subjects__3213E83F4FAD094E");

                    b.HasIndex(new[] { "Name" }, "UQ__subjects__72E12F1B80E3E474")
                        .IsUnique();

                    b.ToTable("subjects", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__tags__3213E83FCA339F7A");

                    b.HasIndex(new[] { "Name" }, "UQ__tags__72E12F1B5021F2F2")
                        .IsUnique();

                    b.ToTable("tags", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AcademicYearId")
                        .HasColumnType("int")
                        .HasColumnName("academic_year_id");

                    b.Property<string>("ConditionText")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("condition_text");

                    b.Property<DateTime>("DateAdded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("date_added")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int")
                        .HasColumnName("subject_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("title");

                    b.Property<int>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("type_id");

                    b.Property<int?>("UserAddedId")
                        .HasColumnType("int")
                        .HasColumnName("user_added_id");

                    b.HasKey("Id")
                        .HasName("PK__tasks__3213E83F35905B03");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TypeId");

                    b.HasIndex("UserAddedId");

                    b.ToTable("tasks", (string)null);
                });

            modelBuilder.Entity("Domain.Models.TaskFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("file_name");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("file_path");

                    b.Property<int>("TaskId")
                        .HasColumnType("int")
                        .HasColumnName("task_id");

                    b.HasKey("Id")
                        .HasName("PK__task_fil__3213E83F73F69B58");

                    b.HasIndex("TaskId");

                    b.ToTable("task_files", (string)null);
                });

            modelBuilder.Entity("Domain.Models.TaskType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__task_typ__3213E83F1AADA2B1");

                    b.HasIndex(new[] { "Name" }, "UQ__task_typ__72E12F1B80BCA519")
                        .IsUnique();

                    b.ToTable("task_types", (string)null);
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("password");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("PK__users__3213E83FB69E9D25");

                    b.HasIndex("RoleId");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("TaskAuthor", b =>
                {
                    b.Property<int>("TaskId")
                        .HasColumnType("int")
                        .HasColumnName("task_id");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int")
                        .HasColumnName("author_id");

                    b.HasKey("TaskId", "AuthorId")
                        .HasName("PK_TaskAuthors");

                    b.HasIndex("AuthorId");

                    b.ToTable("task_authors", (string)null);
                });

            modelBuilder.Entity("TaskTag", b =>
                {
                    b.Property<int>("TaskId")
                        .HasColumnType("int")
                        .HasColumnName("task_id");

                    b.Property<int>("TagId")
                        .HasColumnType("int")
                        .HasColumnName("tag_id");

                    b.HasKey("TaskId", "TagId")
                        .HasName("PK_TaskTags");

                    b.HasIndex("TagId");

                    b.ToTable("task_tags", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Solution", b =>
                {
                    b.HasOne("Domain.Models.Task", "Task")
                        .WithMany("Solutions")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Solutions_Task");

                    b.HasOne("Domain.Models.User", "UserAdded")
                        .WithMany("Solutions")
                        .HasForeignKey("UserAddedId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_users_solutions");

                    b.Navigation("Task");

                    b.Navigation("UserAdded");
                });

            modelBuilder.Entity("Domain.Models.SolutionFile", b =>
                {
                    b.HasOne("Domain.Models.Solution", "Solution")
                        .WithMany("SolutionFiles")
                        .HasForeignKey("SolutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SolutionFiles_Solution");

                    b.Navigation("Solution");
                });

            modelBuilder.Entity("Domain.Models.Task", b =>
                {
                    b.HasOne("Domain.Models.AcademicYear", "AcademicYear")
                        .WithMany("Tasks")
                        .HasForeignKey("AcademicYearId")
                        .HasConstraintName("FK_Tasks_AcademicYear");

                    b.HasOne("Domain.Models.Subject", "Subject")
                        .WithMany("Tasks")
                        .HasForeignKey("SubjectId")
                        .IsRequired()
                        .HasConstraintName("FK_Tasks_Subject");

                    b.HasOne("Domain.Models.TaskType", "Type")
                        .WithMany("Tasks")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Tasks_Type");

                    b.HasOne("Domain.Models.User", "UserAdded")
                        .WithMany("Tasks")
                        .HasForeignKey("UserAddedId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_users_tasks");

                    b.Navigation("AcademicYear");

                    b.Navigation("Subject");

                    b.Navigation("Type");

                    b.Navigation("UserAdded");
                });

            modelBuilder.Entity("Domain.Models.TaskFile", b =>
                {
                    b.HasOne("Domain.Models.Task", "Task")
                        .WithMany("TaskFiles")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TaskFiles_Task");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.HasOne("Domain.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("fk_users_roles");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("TaskAuthor", b =>
                {
                    b.HasOne("Domain.Models.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .IsRequired()
                        .HasConstraintName("FK_TaskAuthors_Author");

                    b.HasOne("Domain.Models.Task", null)
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TaskAuthors_Task");
                });

            modelBuilder.Entity("TaskTag", b =>
                {
                    b.HasOne("Domain.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagId")
                        .IsRequired()
                        .HasConstraintName("FK_TaskTags_Tag");

                    b.HasOne("Domain.Models.Task", null)
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TaskTags_Task");
                });

            modelBuilder.Entity("Domain.Models.AcademicYear", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Domain.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Models.Solution", b =>
                {
                    b.Navigation("SolutionFiles");
                });

            modelBuilder.Entity("Domain.Models.Subject", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Domain.Models.Task", b =>
                {
                    b.Navigation("Solutions");

                    b.Navigation("TaskFiles");
                });

            modelBuilder.Entity("Domain.Models.TaskType", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Navigation("Solutions");

                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
